name: Integration tests

resources:
  repositories:
    - repository: toggleKeyVaultRepo
      endpoint: UiPath
      type: github
      name: UiPath/AzurePipelinesTemplates
      ref: refs/tags/uipath.kv-access.1.2.7

# Trigger the pipeline for all PRs we open, but do not start as long as there is no PR.
trigger:
  none

pr:
  branches:
    include:
    - '*'

pool:
  vmImage: ubuntu-latest

jobs:
  - job: get_keyvault_secrets
    displayName: Get keyvault secrets
    steps:
      - template: Helpers/toggle.vault.access.steps.yml@toggleKeyVaultRepo
        parameters:
          serviceConnection: $(serviceConnection)
          keyVaultName: $(keyVaultName)
          enabled: true

      # Get all secrets to be used for running dbt transformations
      - task: AzureKeyVault@2
        displayName: Download secrets from $(keyVaultName)
        retryCountOnTaskFailure: 3
        condition: succeeded()
        inputs:
          azureSubscription: $(serviceConnection)
          KeyVaultName: $(keyVaultName)
          secretsFilter: 'devSQLServerCIServer,
            devSQLServerCIUser,
            devSQLServerCIPassword,
            devSQLServerCIDatabase,
            devSnowflakeCIAccountPassword,
            devSnowflakeCIAccount,
            devSnowflakeCIUser,
            devSnowflakeCIRole,
            devSnowflakeCIDatabase,
            devSnowflakeCIWarehouse,
            connectorsAzureStorageAccessKey'

      - template: Helpers/toggle.vault.access.steps.yml@toggleKeyVaultRepo
        parameters:
          serviceConnection: $(serviceConnection)
          keyVaultName: $(keyVaultName)
          enabled: false

      # The variables are set as output variables, so they can be used in other jobs.
      # All are set as secret variables, so they are not set automatically as environment variables.
      - bash: |
          echo '##vso[task.setvariable variable=DBT_SQL_SERVER_SERVER;isOutput=true;issecret=true]$(devSQLServerCIServer)'
          echo '##vso[task.setvariable variable=DBT_SQL_SERVER_USER;isOutput=true;issecret=true]$(devSQLServerCIUser)'
          echo '##vso[task.setvariable variable=DBT_SQL_SERVER_PASSWORD;isOutput=true;issecret=true]$(devSQLServerCIPassword)'
          echo '##vso[task.setvariable variable=DBT_SQL_SERVER_DATABASE;isOutput=true;issecret=true]$(devSQLServerCIDatabase)'
          echo '##vso[task.setvariable variable=SNOWSQL_PWD_input;isOutput=true;issecret=true]$(devSnowflakeCIAccountPassword)'
          echo '##vso[task.setvariable variable=DBT_SNOWFLAKE_ACCOUNT;isOutput=true;issecret=true]$(devSnowflakeCIAccount)'
          echo '##vso[task.setvariable variable=DBT_SNOWFLAKE_USER;isOutput=true;issecret=true]$(devSnowflakeCIUser)'
          echo '##vso[task.setvariable variable=DBT_SNOWFLAKE_PASSWORD;isOutput=true;issecret=true]$(devSnowflakeCIAccountPassword)'
          echo '##vso[task.setvariable variable=DBT_SNOWFLAKE_ROLE;isOutput=true;issecret=true]$(devSnowflakeCIRole)'
          echo '##vso[task.setvariable variable=DBT_SNOWFLAKE_DATABASE;isOutput=true;issecret=true]$(devSnowflakeCIDatabase)'
          echo '##vso[task.setvariable variable=DBT_SNOWFLAKE_WAREHOUSE;isOutput=true;issecret=true]$(devSnowflakeCIWarehouse)'
          echo '##vso[task.setvariable variable=STORAGE_ACCESS_KEY;isOutput=true;issecret=true]$(connectorsAzureStorageAccessKey)'      
        name: set_variables

  - job: integration_tests
    displayName: Integration tests
    dependsOn: get_keyvault_secrets
    condition: eq(dependencies.get_keyvault_secrets.result, 'Succeeded')
    variables:
        DBT_SQL_SERVER_SERVER: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_SERVER'] ]
        DBT_SQL_SERVER_USER: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_USER'] ]
        DBT_SQL_SERVER_PASSWORD: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_PASSWORD'] ]
        DBT_SQL_SERVER_DATABASE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_DATABASE'] ]
        DBT_SNOWFLAKE_ACCOUNT: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_ACCOUNT'] ]
        DBT_SNOWFLAKE_USER: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_USER'] ]
        DBT_SNOWFLAKE_PASSWORD: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_PASSWORD'] ]
        DBT_SNOWFLAKE_ROLE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_ROLE'] ]
        DBT_SNOWFLAKE_DATABASE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_DATABASE'] ]
        DBT_SNOWFLAKE_WAREHOUSE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_WAREHOUSE'] ]
    steps:
      - checkout: self
        path: self
        displayName: Checkout current repository

      - bash: |
          echo "##vso[task.setvariable variable=DBT_SCHEMA]pm_utils_integration_tests"
          echo "##vso[task.setvariable variable=dbtProjectPath]$(Agent.BuildDirectory)/self/integration_tests"
        displayName: Set variables

      - bash: |
          python --version

          sudo apt-get install git libpq-dev python-dev python3-pip
          sudo apt-get remove python-cffi
          sudo pip install --upgrade cffi

          python3 -m venv dbt-env
          python3 -m venv dbt-env-sqlserver

          source dbt-env/bin/activate
          pip install dbt-core==1.8.8
          pip install dbt-snowflake==1.8.4
          dbt --version

          source dbt-env-sqlserver/bin/activate
          pip install dbt-core==1.8.8
          pip install dbt-sqlserver==1.8.5
          dbt --version
        displayName: Install dbt

      - bash: |
          source dbt-env/bin/activate
          cd $(dbtProjectPath)
          dbt deps
        displayName: Install dbt dependencies

      - bash: |
          source dbt-env-sqlserver/bin/activate
          cd $(dbtProjectPath)
          dbt build --profiles-dir $(Agent.BuildDirectory)/self/.pipelines --profile default -t sqlserver-ci \
            --vars '{"DBT_SQL_SERVER_SERVER": "$(DBT_SQL_SERVER_SERVER)", "DBT_SQL_SERVER_USER": "$(DBT_SQL_SERVER_USER)", "DBT_SQL_SERVER_PASSWORD": "$(DBT_SQL_SERVER_PASSWORD)", "DBT_SQL_SERVER_DATABASE": "$(DBT_SQL_SERVER_DATABASE)", "DBT_SCHEMA": "$(DBT_SCHEMA)"}'
        displayName: Test (SQL Server)

      - bash: |
          source dbt-env/bin/activate
          cd $(dbtProjectPath)
          dbt build --profiles-dir $(Agent.BuildDirectory)/self/.pipelines --profile default -t snowflake-ci \
            --vars '{"DBT_SNOWFLAKE_ACCOUNT": "$(DBT_SNOWFLAKE_ACCOUNT)", "DBT_SNOWFLAKE_USER": "$(DBT_SNOWFLAKE_USER)", "DBT_SNOWFLAKE_PASSWORD": "$(DBT_SNOWFLAKE_PASSWORD)", "DBT_SNOWFLAKE_ROLE": "$(DBT_SNOWFLAKE_ROLE)", "DBT_SNOWFLAKE_DATABASE": "$(DBT_SNOWFLAKE_DATABASE)", "DBT_SNOWFLAKE_WAREHOUSE": "$(DBT_SNOWFLAKE_WAREHOUSE)", "DBT_SCHEMA": "$(DBT_SCHEMA)"}'
        displayName: Test (Snowflake)
