name: Integration tests

resources:
  repositories:
    - repository: toggleKeyVaultRepo
      endpoint: UiPath
      type: github
      name: UiPath/AzurePipelinesTemplates
      ref: refs/tags/uipath.kv-access.1.2.7

    - repository: testTransformations
      endpoint: UiPath
      type: github
      name: UiPath/ProcessMining-framework-resources
      ref: refs/tags/test_transformations.1.2.1

# Trigger the pipeline for all PRs we open, but do not start as long as there is no PR.
trigger:
  none

pr:
  branches:
    include:
    - '*'

pool:
  vmImage: ubuntu-latest

jobs:
  - job: get_keyvault_secrets
    displayName: Get keyvault secrets
    steps:
      - template: ./.pipelines/templates/get_keyvault_secrets.job.yml@testTransformations
        parameters:
          serviceConnection: $(serviceConnection)
          keyVaultName: $(keyVaultName)

  - job: integration_tests
    displayName: Integration tests
    dependsOn: get_keyvault_secrets
    condition: eq(dependencies.get_keyvault_secrets.result, 'Succeeded')
    variables:
        DBT_DATABRICKS_CATALOG: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_DATABRICKS_CATALOG'] ]
        DBT_DATABRICKS_HOST: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_DATABRICKS_HOST'] ]
        DBT_DATABRICKS_HTTP_PATH: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_DATABRICKS_HTTP_PATH'] ]
        DBT_DATABRICKS_TOKEN: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_DATABRICKS_TOKEN'] ]
        DBT_SQL_SERVER_SERVER: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_SERVER'] ]
        DBT_SQL_SERVER_USER: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_USER'] ]
        DBT_SQL_SERVER_PASSWORD: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_PASSWORD'] ]
        DBT_SQL_SERVER_DATABASE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SQL_SERVER_DATABASE'] ]
        DBT_SNOWFLAKE_ACCOUNT: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_ACCOUNT'] ]
        DBT_SNOWFLAKE_USER: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_USER'] ]
        DBT_SNOWFLAKE_PASSWORD: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_PASSWORD'] ]
        DBT_SNOWFLAKE_ROLE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_ROLE'] ]
        DBT_SNOWFLAKE_DATABASE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_DATABASE'] ]
        DBT_SNOWFLAKE_WAREHOUSE: $[ dependencies.get_keyvault_secrets.outputs['set_variables.DBT_SNOWFLAKE_WAREHOUSE'] ]
    steps:
      - checkout: self
        path: self
        displayName: Checkout current repository

      - checkout: testTransformations
        path: framework_resources
        displayName: Checkout framework resources repository

      - bash: |
          echo "##vso[task.setvariable variable=DBT_SCHEMA]pm_utils_integration_tests"
          echo "##vso[task.setvariable variable=dbtProjectPath]$(Agent.BuildDirectory)/self/integration_tests"
          echo "##vso[task.setvariable variable=dbtProjectPathQuotes]$(Agent.BuildDirectory)/self/transformations_double_quotes"
        displayName: Set variables

      # Replace quotes in the dbt project to run it on SQL Server and Snowflake. The replaced version of the project is stored as "transformations_double_quotes".
      - task: PowerShell@2
        inputs:
          filePath: $(Agent.BuildDirectory)/framework_resources/.pipelines/resources/copy_and_replace_quotes.ps1
          arguments: -folderPath "$(dbtProjectPath)"
        displayName: "Create dbt project with double quotes" 

      - bash: |
          python --version

          sudo apt-get install git libpq-dev python-dev python3-pip
          sudo apt-get remove python-cffi
          sudo pip install --upgrade cffi

          python3 -m venv dbt-env
          python3 -m venv dbt-env-sqlserver

          source dbt-env/bin/activate
          pip install databricks-sql-connector==2.9.3
          pip install dbt-databricks==1.7.1
          pip install dbt-snowflake==1.7.0
          dbt --version

          source dbt-env-sqlserver/bin/activate
          pip install dbt-sqlserver==1.4.3
          dbt --version
        displayName: Install dbt

      - bash: |
          source dbt-env/bin/activate
          cd $(dbtProjectPath)
          dbt deps
        displayName: Install dbt dependencies

      - bash: |
          source dbt-env/bin/activate
          cd $(dbtProjectPath)
          dbt build --profiles-dir $(Agent.BuildDirectory)/self/.pipelines --profile default -t databricks-ci \
            --vars '{"schema_sources": "$(DBT_SCHEMA_SOURCES)", "DBT_DATABRICKS_CATALOG": "$(DBT_DATABRICKS_CATALOG)", "DBT_DATABRICKS_HOST": "$(DBT_DATABRICKS_HOST)", "DBT_DATABRICKS_HTTP_PATH": "$(DBT_DATABRICKS_HTTP_PATH)", "DBT_DATABRICKS_TOKEN": "$(DBT_DATABRICKS_TOKEN)", "DBT_SCHEMA": "$(DBT_SCHEMA)"}'
        displayName: Test (Databricks)

      - bash: |
          source dbt-env/bin/activate
          cd $(dbtProjectPathQuotes)
          dbt deps
        displayName: Install dbt dependencies (double quotes) 

      - bash: |
          source dbt-env-sqlserver/bin/activate
          cd $(dbtProjectPathQuotes)
          dbt build --profiles-dir $(Agent.BuildDirectory)/self/.pipelines --profile default -t sqlserver-ci \
            --vars '{"schema_sources": "$(DBT_SCHEMA_SOURCES)", "DBT_SQL_SERVER_SERVER": "$(DBT_SQL_SERVER_SERVER)", "DBT_SQL_SERVER_USER": "$(DBT_SQL_SERVER_USER)", "DBT_SQL_SERVER_PASSWORD": "$(DBT_SQL_SERVER_PASSWORD)", "DBT_SQL_SERVER_DATABASE": "$(DBT_SQL_SERVER_DATABASE)", "DBT_SCHEMA": "$(DBT_SCHEMA)"}'
        displayName: Test (SQL Server)

      - bash: |
          source dbt-env/bin/activate
          cd $(dbtProjectPathQuotes)
          dbt build --profiles-dir $(Agent.BuildDirectory)/self/.pipelines --profile default -t snowflake-ci \
            --vars '{"schema_sources": "$(DBT_SCHEMA_SOURCES)", "DBT_SNOWFLAKE_ACCOUNT": "$(DBT_SNOWFLAKE_ACCOUNT)", "DBT_SNOWFLAKE_USER": "$(DBT_SNOWFLAKE_USER)", "DBT_SNOWFLAKE_PASSWORD": "$(DBT_SNOWFLAKE_PASSWORD)", "DBT_SNOWFLAKE_ROLE": "$(DBT_SNOWFLAKE_ROLE)", "DBT_SNOWFLAKE_DATABASE": "$(DBT_SNOWFLAKE_DATABASE)", "DBT_SNOWFLAKE_WAREHOUSE": "$(DBT_SNOWFLAKE_WAREHOUSE)", "DBT_SCHEMA": "$(DBT_SCHEMA)"}'
        displayName: Test (Snowflake)
